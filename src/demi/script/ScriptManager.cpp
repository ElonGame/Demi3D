/**********************************************************************
This source file is a part of Demi3D
   __  ___  __  __  __
  |  \|_ |\/||   _)|  \ 
  |__/|__|  ||  __)|__/ 

Copyright (c) 2013-2014 Demi team
https://github.com/wangyanxing/Demi3D

Released under the MIT License
https://github.com/wangyanxing/Demi3D/blob/master/License.txt
***********************************************************************/

#include "ScriptManager.h"
#include "PathLib.h"

// this file is automatically generated by tolua++
#include "bindscript/binding.h"

namespace Demi
{
    DiScriptManager* DiScriptManager::sMgr = nullptr;
    
    DiScriptManager::DiScriptManager()
        :mLuaState(nullptr)
    {
        DI_ASSERT(!sMgr);
        sMgr = this;

        Init();
    }
    
    DiScriptManager::~DiScriptManager()
    {
        Shutdown();
        sMgr = nullptr;
    }
    
    void DiScriptManager::Init()
    {
        DI_LOG("Initializing lua script module...");
        mLuaState = luaL_newstate();
        luaL_openlibs(mLuaState);

        d_ownsState = (mLuaState == nullptr);
        d_errFuncIndex = LUA_NOREF;
        d_activeErrFuncIndex = LUA_NOREF;

#if DEMI_PLATFORM != DEMI_PLATFORM_IOS
        DiString baseFolder = "../../scripts";
#else
        DiString baseFolder = "./scripts";
#endif

        DiString appPath = DiPathLib::GetApplicationPath();
        mBasePath = appPath + baseFolder;
        mBasePath.SimplifyPath();
        mBasePath += "/";

        //BindMiscLib();
        //BindGfxLib();

        DI_LOG("Binding to lua...");
        tolua_ScriptMain_open(mLuaState);

        RunFile("test.lua");
    }
    
    void DiScriptManager::Shutdown()
    {
        DI_LOG("Shuting down lua script module...");
        lua_close(mLuaState);
        mLuaState = nullptr;
    }

    void DiScriptManager::RunBuffer(DiDataStreamPtr data)
    {
        char* buffer = DI_NEW char[data->Size()+1];
        data->Read(buffer, data->Size());
        buffer[data->Size()] = 0;
        
        int top = lua_gettop(mLuaState);

        int loaderr = luaL_loadbuffer(mLuaState,
            buffer, data->Size(), data->GetName().c_str());

        if (loaderr)
        {
            DiString errMsg = lua_tostring(mLuaState, -1);
            lua_settop(mLuaState, top);
            DI_WARNING("Unable to execute Lua script file: %s\n%s", data->GetName().c_str(),
                errMsg.c_str());
        }

        // call it
        if (lua_pcall(mLuaState, 0, 0, top))
        {
            DiString errMsg = lua_tostring(mLuaState, -1);
            lua_settop(mLuaState, top);
            DI_WARNING("Unable to execute Lua script file: %s\n%s", data->GetName().c_str(),
                errMsg.c_str());
        }

        lua_settop(mLuaState, top);

        DI_DELETE[] buffer;
    }

    void DiScriptManager::RunFile(const DiString& fileName)
    {
        DI_LOG("Running file: %s", fileName.c_str());

        DiString realPath = mBasePath + fileName;

        FILE* fp = fopen(realPath.c_str(), "rb");
        if (!fp)
        {
            DI_WARNING("Cannot open lua source file: %s", realPath.c_str());
            return;
        }
        DiDataStreamPtr data(DI_NEW DiFileHandleDataStream(fileName,fp));
        RunBuffer(data);
    }

    int DiScriptManager::initErrorHandlerFunc()
    {
        return 0;
    }

    int DiScriptManager::initErrorHandlerFunc(const DiString& func)
    {
        return 0;
    }

}